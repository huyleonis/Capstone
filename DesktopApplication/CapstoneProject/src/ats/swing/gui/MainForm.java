/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ats.swing.gui;

import ats.daos.TransactionDAO;
import ats.dtos.LoginDTO;
import ats.dtos.TransactionDetailDTO;
import ats.dtos.VehicleDTO;
import ats.dtos.VehiclePayment;
import ats.request.LoginRequest;
import ats.request.ManualPaymentRequest;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Chi Hieu
 */
public class MainForm extends javax.swing.JFrame {

    String localhost = "";
    JTable tblHistory = new JTable();

    /**
     * Khởi tạo mainform
     */
    public MainForm(LoginDTO loginDTO) {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        lbId.setVisible(false);
        txtHello.setText("Xin chào, " + loginDTO.getFullname());
        txtLocalhost.setText(loginDTO.getLocalhost());
    }

    private void clearForm() throws IOException {
        txtLicensePlate.setText("");
        //lbId.setText("");
        lbPirce.setText("-");
        lbTypeName.setText("-");

        File f = new File("./src/picture/default_text.png");
        Image image = ImageIO.read(f);
        this.lbPicture.setIcon(new ImageIcon(image));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuTab = new javax.swing.JTabbedPane();
        tabHome = new javax.swing.JPanel();
        InfoPane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtLicensePlate = new javax.swing.JTextField();
        lbPirce = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbTypeName = new javax.swing.JLabel();
        lbId = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lbNotification = new javax.swing.JLabel();
        panelCamera = new javax.swing.JPanel();
        lbPicture = new javax.swing.JLabel();
        txtHello = new javax.swing.JLabel();
        btnManualPayment = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tabHistory = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        TablePane = new javax.swing.JPanel();
        jLabel100 = new javax.swing.JLabel();
        lbTotal = new javax.swing.JLabel();
        btnPayTotal = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lbWantPay = new javax.swing.JLabel();
        btnPaymentWant = new javax.swing.JButton();
        tabSetting = new javax.swing.JPanel();
        panePayment = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtStation = new javax.swing.JFormattedTextField();
        txtLane = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtStationName = new javax.swing.JTextField();
        paneBasic = new javax.swing.JPanel();
        txtLogOut = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtLocalhost = new javax.swing.JTextField();
        btnCheckConnection = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new java.awt.CardLayout());

        menuTab.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        menuTab.setMinimumSize(new java.awt.Dimension(1280, 720));
        menuTab.setPreferredSize(new java.awt.Dimension(1280, 720));

        tabHome.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tabHome.setPreferredSize(new java.awt.Dimension(1280, 720));

        InfoPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Xe hiện tại", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 24), new java.awt.Color(0, 51, 255))); // NOI18N
        InfoPane.setMaximumSize(new java.awt.Dimension(270, 350));
        InfoPane.setMinimumSize(new java.awt.Dimension(270, 350));
        InfoPane.setPreferredSize(new java.awt.Dimension(270, 350));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Biển số xe:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Loại xe:");

        txtLicensePlate.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        txtLicensePlate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLicensePlate.setToolTipText("Nhập biển số xe");
        txtLicensePlate.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtLicensePlate.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtLicensePlateCaretUpdate(evt);
            }
        });
        txtLicensePlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLicensePlateActionPerformed(evt);
            }
        });
        txtLicensePlate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLicensePlateKeyPressed(evt);
            }
        });

        lbPirce.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lbPirce.setForeground(new java.awt.Color(0, 0, 204));
        lbPirce.setText("-");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Giá tiền:");

        lbTypeName.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lbTypeName.setForeground(new java.awt.Color(0, 0, 204));
        lbTypeName.setText("-");

        lbId.setText("id");

        btnClear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnClear.setText("Làm mới (F5)");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        btnClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnClearKeyPressed(evt);
            }
        });

        lbNotification.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNotification.setForeground(new java.awt.Color(255, 0, 0));
        lbNotification.setText("...");
        lbNotification.setToolTipText("Click để xem chi tiết");
        lbNotification.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbNotification.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbNotificationMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout InfoPaneLayout = new javax.swing.GroupLayout(InfoPane);
        InfoPane.setLayout(InfoPaneLayout);
        InfoPaneLayout.setHorizontalGroup(
            InfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InfoPaneLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txtLicensePlate, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbId, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTypeName, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPirce, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNotification))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        InfoPaneLayout.setVerticalGroup(
            InfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InfoPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLicensePlate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbTypeName)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPirce)
                .addGap(27, 27, 27)
                .addComponent(lbNotification)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbId)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        panelCamera.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPicture.setToolTipText("Hình ảnh xe");
        lbPicture.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelCameraLayout = new javax.swing.GroupLayout(panelCamera);
        panelCamera.setLayout(panelCameraLayout);
        panelCameraLayout.setHorizontalGroup(
            panelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCameraLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        panelCameraLayout.setVerticalGroup(
            panelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCameraLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        txtHello.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        txtHello.setText("Xin Chào, ");

        btnManualPayment.setBackground(new java.awt.Color(153, 204, 255));
        btnManualPayment.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        btnManualPayment.setForeground(new java.awt.Color(51, 51, 51));
        btnManualPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/750765_hand_512x512.png"))); // NOI18N
        btnManualPayment.setText("Đã Thu");
        btnManualPayment.setToolTipText("Ấn để tiến hành thu phí");
        btnManualPayment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManualPayment.setName(""); // NOI18N
        btnManualPayment.setPreferredSize(new java.awt.Dimension(140, 40));
        btnManualPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManualPaymentActionPerformed(evt);
            }
        });
        btnManualPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnManualPaymentKeyPressed(evt);
            }
        });

        jLabel10.setText("Hệ thống thu phí ATS - FPT University - 2017");

        javax.swing.GroupLayout tabHomeLayout = new javax.swing.GroupLayout(tabHome);
        tabHome.setLayout(tabHomeLayout);
        tabHomeLayout.setHorizontalGroup(
            tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHomeLayout.createSequentialGroup()
                .addGroup(tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tabHomeLayout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(txtHello))
                        .addGroup(tabHomeLayout.createSequentialGroup()
                            .addGroup(tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(tabHomeLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(InfoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(tabHomeLayout.createSequentialGroup()
                                    .addGap(50, 50, 50)
                                    .addComponent(btnManualPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addComponent(panelCamera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        tabHomeLayout.setVerticalGroup(
            tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtHello)
                .addGroup(tabHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabHomeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InfoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnManualPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabHomeLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(panelCamera, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addContainerGap())
        );

        menuTab.addTab("Thu Phí", tabHome);
        tabHome.getAccessibleContext().setAccessibleName("");

        txtSearch.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Biển số xe:");

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        TablePane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách giao dịch", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 16), new java.awt.Color(0, 0, 255))); // NOI18N
        TablePane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablePaneMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TablePaneMouseReleased(evt);
            }
        });
        TablePane.setLayout(new java.awt.BorderLayout());

        jLabel100.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel100.setText("Tổng số tiền chưa thanh toán: ");

        lbTotal.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTotal.setForeground(new java.awt.Color(255, 0, 51));

        btnPayTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPayTotal.setText("Chọn tất cả");
        btnPayTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayTotalActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("Số tiền muốn thanh toán: ");

        lbWantPay.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lbWantPay.setForeground(new java.awt.Color(51, 51, 255));
        lbWantPay.setText("0 đồng");

        btnPaymentWant.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnPaymentWant.setText("Thanh toán");
        btnPaymentWant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentWantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabHistoryLayout = new javax.swing.GroupLayout(tabHistory);
        tabHistory.setLayout(tabHistoryLayout);
        tabHistoryLayout.setHorizontalGroup(
            tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHistoryLayout.createSequentialGroup()
                .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabHistoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TablePane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(tabHistoryLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnPayTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(tabHistoryLayout.createSequentialGroup()
                        .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabHistoryLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel100))
                                .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabHistoryLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tabHistoryLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbWantPay, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(tabHistoryLayout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(btnPaymentWant, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(tabHistoryLayout.createSequentialGroup()
                                .addGap(359, 359, 359)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 492, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabHistoryLayout.setVerticalGroup(
            tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabHistoryLayout.createSequentialGroup()
                .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tabHistoryLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPayTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabHistoryLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(TablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel100))))
                .addGap(29, 29, 29)
                .addGroup(tabHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lbWantPay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPaymentWant, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        menuTab.addTab("Lịch Sử Giao Dịch", tabHistory);

        panePayment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin thu phí", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 24), new java.awt.Color(0, 51, 255))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Làn xe");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Mã số trạm");

        txtStation.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtStation.setText("1");
        txtStation.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtLane.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtLane.setText("1");
        txtLane.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Tên trạm");

        txtStationName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        javax.swing.GroupLayout panePaymentLayout = new javax.swing.GroupLayout(panePayment);
        panePayment.setLayout(panePaymentLayout);
        panePaymentLayout.setHorizontalGroup(
            panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLane, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStation, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStationName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        panePaymentLayout.setVerticalGroup(
            panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panePaymentLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtStationName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(panePaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneBasic.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cài đặt cơ bản", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 24), new java.awt.Color(0, 51, 255))); // NOI18N
        paneBasic.setMaximumSize(new java.awt.Dimension(538, 298));
        paneBasic.setMinimumSize(new java.awt.Dimension(538, 298));
        paneBasic.setOpaque(false);
        paneBasic.setPreferredSize(new java.awt.Dimension(538, 298));
        paneBasic.setRequestFocusEnabled(false);

        txtLogOut.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtLogOut.setText("Đăng nhập với tài khoản khác");
        txtLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLogOutActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Địa chỉ máy chủ");

        txtLocalhost.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtLocalhost.setText("http://localhost:8080");
        txtLocalhost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocalhostActionPerformed(evt);
            }
        });

        btnCheckConnection.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCheckConnection.setText("Kiểm tra kết nối");
        btnCheckConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckConnectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneBasicLayout = new javax.swing.GroupLayout(paneBasic);
        paneBasic.setLayout(paneBasicLayout);
        paneBasicLayout.setHorizontalGroup(
            paneBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneBasicLayout.createSequentialGroup()
                .addGroup(paneBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneBasicLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(paneBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(paneBasicLayout.createSequentialGroup()
                                .addComponent(txtLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCheckConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(paneBasicLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtLogOut)))
                .addGap(114, 114, 114))
        );
        paneBasicLayout.setVerticalGroup(
            paneBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneBasicLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneBasicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout tabSettingLayout = new javax.swing.GroupLayout(tabSetting);
        tabSetting.setLayout(tabSettingLayout);
        tabSettingLayout.setHorizontalGroup(
            tabSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSettingLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(paneBasic, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(panePayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(397, 397, 397))
        );
        tabSettingLayout.setVerticalGroup(
            tabSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabSettingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabSettingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paneBasic, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panePayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(408, Short.MAX_VALUE))
        );

        menuTab.addTab("Cài Đặt", tabSetting);

        getContentPane().add(menuTab, "card2");
        menuTab.getAccessibleContext().setAccessibleName("JTabbedPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckConnectionActionPerformed
        String localhost = txtLocalhost.getText().trim();
        LoginRequest lp = new LoginRequest();
        boolean check = lp.checkConnection(localhost);
        if (check) {
            JOptionPane.showMessageDialog(null, "Kết nối thành công!", "Kiểm tra kết nối", JOptionPane.OK_OPTION);
        } else {
            JOptionPane.showMessageDialog(null, "Kết nối thất bại! Xin thử lại", "Kiểm tra kết nối", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnCheckConnectionActionPerformed

    private void txtLocalhostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocalhostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocalhostActionPerformed

    private void txtLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLogOutActionPerformed
        this.setVisible(false);
        GlobalVar.login.setVisible(true);
    }//GEN-LAST:event_txtLogOutActionPerformed

    /**
     * Event ấn nút Enter của button "Đã thu"
     *
     * @return
     */
    private void btnManualPaymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnManualPaymentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnManualPayment.doClick();
        }
    }//GEN-LAST:event_btnManualPaymentKeyPressed

    /**
     * Event của button "Đã thu" Staff nhập biển số xe và gửi request lên server
     * yêu cầu thanh toán thủ công
     *
     * input licensePlate, idLane
     *
     * @return typeVehicle, price
     */
    private void btnManualPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManualPaymentActionPerformed

        ManualPaymentRequest rs = new ManualPaymentRequest();
        TransactionDAO dao = new TransactionDAO();
        String licensePlate = txtLicensePlate.getText().toUpperCase().trim();
        String id = lbId.getText().trim();
        localhost = txtLocalhost.getText().trim();
        int landId = Integer.parseInt(txtLane.getText().trim());
        try {
            if ("".equals(id)) {
                VehiclePayment vp = rs.insertManualPayment(licensePlate, landId, localhost);
                if ("".equals(vp.getId())) {
                    boolean check = dao.insertTransaction(licensePlate, landId, null);
                    if (check) {
                        clearForm();
                    }
                } else {
                    //rs.insertManualPayment(licensePlate, landId, localhost);
                    rs.finishManualPayment(vp.getId(), localhost);
                    clearForm();
                }
            } else {
                rs.finishManualPayment(id, localhost);
                clearForm();
            }

        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnManualPaymentActionPerformed

    private void btnClearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnClearKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnClear.doClick();
        }
    }//GEN-LAST:event_btnClearKeyPressed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        try {
            clearForm();
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtLicensePlateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLicensePlateKeyPressed

        // Sự kiện Ấn nút F5
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            btnClear.doClick();
        }
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            
//        }

    }//GEN-LAST:event_txtLicensePlateKeyPressed

    private void txtLicensePlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLicensePlateActionPerformed
        localhost = txtLocalhost.getText().trim();
        String licensePlate = txtLicensePlate.getText().toUpperCase().trim();
        int stationId = Integer.parseInt(txtStation.getText().trim());
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        //VehicleDAO dao = new VehicleDAO();
        ManualPaymentRequest mpr = new ManualPaymentRequest();
        if (licensePlate.matches("^\\d{2}[A-Z]\\d{4,5}$")) {
            try {
                /*Bắt đầu lấy dữ liệu của xe để show lên màn hình*/
                VehicleDTO vehicleDTO = mpr.getInfoVehicle(licensePlate, stationId, localhost);
                if (vehicleDTO != null) {
                    if (vehicleDTO.getPrice() != null) {
                        lbPirce.setText(formatter.format(vehicleDTO.getPrice()) + " đồng");
                    } else {
                        lbPirce.setText("-");
                    }
                    if (vehicleDTO.getTypeVehicle() != null) {
                        lbTypeName.setText(vehicleDTO.getTypeVehicle());
                    } else {
                        lbTypeName.setText("-");
                    }

                } else {
                    lbPirce.setText("-");
                    lbTypeName.setText("-");
                }

                /*Kiểm tra giao dịch đã tồn tại trên hệ thống chưa*/
                //int vehicleId = dao.findVehicleByLicensePlate(licensePlate);
                VehiclePayment vp = mpr.getCapturedTransaction(licensePlate, stationId, localhost);
                String photo = vp.getPhoto();
                String transactionId = vp.getId();

                if (transactionId != null) {
                    lbId.setText(transactionId);
                } else {
                    lbId.setText("");
                }

                if (photo != null) {
                    //                    //loading gif
                    //                    File defaultImg = new File("./src/picture/giphy.gif");
                    //                    Image imageLoading = ImageIO.read(defaultImg);
                    //                    this.lbPicture.setIcon(new ImageIcon(imageLoading));
                    //
                    //                    Thread.sleep(1000);
                    String path = localhost + "/imgs/plates/" + photo;
                    System.out.println("Get Image from " + path);

                    //Download image
                    URL url = new URL(path);
                    Image image = ImageIO.read(url);
                    System.out.println("Load image into frame...");
                    //JLabel label = new JLabel(new ImageIcon(image));
                    this.lbPicture.setIcon(new ImageIcon(image));
                } else {
                    File defaultImg = new File("./src/picture/default_text.png");
                    Image image = ImageIO.read(defaultImg);
                    this.lbPicture.setIcon(new ImageIcon(image));
                }
            } catch (Exception ex) {
                Logger.getLogger(MainForm.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            List<TransactionDetailDTO> list = mpr.listTransactionNotPay(licensePlate, localhost);
            if (list.size() > 0) {
                lbNotification.setText("Phương tiện " + licensePlate + " còn " + list.size() + " giao dịch chưa thanh toán!");
            } else {
                lbNotification.setText("...");
            }
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtLicensePlateActionPerformed

    /**
     * Event lấy dữ liệu xe gồm loại xe, giá xe từ biển số xe do Staff nhập vào
     *
     * input licensePlate, idLane
     *
     * @return typeVehicle, price
     */
    private void txtLicensePlateCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtLicensePlateCaretUpdate

    }//GEN-LAST:event_txtLicensePlateCaretUpdate

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed


    }//GEN-LAST:event_txtSearchActionPerformed

    private String changeStatus(String status) {
        switch (status) {
            case "TRANS_ERROR":
                return "Thanh toán lỗi";
            case "TRANS_FAILED":
                return "Thanh toán thất bại";
            default:
                return "Chưa thanh toán";
        }
    }

    private String changeType(String type) {
        switch (type) {
            case "MANUAL":
                return "Thanh toán thủ công";
            case "AUTOMATION":
                return "Thanh toán tự động";
            default:
                return "Chưa xác định";
        }
    }

    private String changePrice(String price) {
        String priceValue = "";
        String priceValue2 = "";
        if (price.length() == 11) {
            priceValue = price.substring(0, 6);
            priceValue2 = priceValue.replace(",", "");
        } else if (price.length() == 12) {
            priceValue = price.substring(0, 7);
            priceValue2 = priceValue.replace(",", "");
        } else if (price.length() == 10) {
            priceValue = price.substring(0, 5);
            priceValue2 = priceValue.replace(",", "");
        }

        return priceValue2;
    }

    private void getTable(String licensePlate, String localhost) {
        //JCheckBox checkbox = new JCheckBox();
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        ManualPaymentRequest mpr = new ManualPaymentRequest();
        List<TransactionDetailDTO> list;
        String col[] = {"#", "Id", "Biển số xe", "Loại xe", "Giá", "Loại giao dịch", "Ngày tháng", "Trạng Thái", "Hình ảnh", "Trả phí"};
        DefaultTableModel tbl = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return Integer.class;
                    case 1:
                        return String.class;
                    case 2:
                        return String.class;
                    case 3:
                        return String.class;
                    case 4:
                        return String.class;
                    case 5:
                        return String.class;
                    case 6:
                        return String.class;
                    case 7:
                        return String.class;
                    case 8:
                        return String.class;
                    case 9:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }
        };
        double total = 0.0;

        tblHistory.setModel(tbl);
        tbl.setColumnIdentifiers(col);
        try {
            list = mpr.listTransactionNotPay(licensePlate, localhost);
            if (list.size() > 0) {
                for (int i = 0; i < list.size(); i++) {
                    Object ojb[] = {i + 1 + "", list.get(i).getId(), list.get(i).getLicensePlate(), list.get(i).getTypeVehicle(),
                        formatter.format(list.get(i).getPrice()) + " đồng", changeType(list.get(i).getType()), list.get(i).getDateTime(), changeStatus(list.get(i).getStaus()),
                        list.get(i).getPhoto(), false};
                    total += list.get(i).getPrice();
                    tbl.addRow(ojb);
                }
            }

            tblHistory.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumn index = tblHistory.getColumnModel().getColumn(0);
            index.setPreferredWidth(40);
            TableColumn id = tblHistory.getColumnModel().getColumn(1);
            id.setPreferredWidth(120);
            TableColumn plate = tblHistory.getColumnModel().getColumn(2);
            plate.setPreferredWidth(100);
            TableColumn typeVehicle = tblHistory.getColumnModel().getColumn(3);
            typeVehicle.setPreferredWidth(150);
            TableColumn price = tblHistory.getColumnModel().getColumn(4);
            price.setPreferredWidth(130);
            TableColumn type = tblHistory.getColumnModel().getColumn(5);
            type.setPreferredWidth(135);
            TableColumn date = tblHistory.getColumnModel().getColumn(6);
            date.setPreferredWidth(200);
            TableColumn status = tblHistory.getColumnModel().getColumn(7);
            status.setPreferredWidth(200);
            TableColumn photo = tblHistory.getColumnModel().getColumn(8);
            photo.setPreferredWidth(100);
            TableColumn button = tblHistory.getColumnModel().getColumn(9);
            button.setPreferredWidth(150);
            JScrollPane tableContainer = new JScrollPane(tblHistory);
            TablePane.add(tableContainer, BorderLayout.CENTER);
            repaint();
            revalidate();
            lbTotal.setText(formatter.format(total) + " đồng");
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String search = txtSearch.getText().trim();
        String localhost = txtLocalhost.getText().trim();
        getTable(search, localhost);
    }//GEN-LAST:event_btnSearchActionPerformed
    boolean checkAll = false;
    private void btnPayTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayTotalActionPerformed
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        double money = 0.0;
        if (checkAll) {
            btnPayTotal.setText("Bỏ tất cả");
            for (int i = 0; i < tblHistory.getRowCount(); i++) {
                tblHistory.setValueAt(true, i, 9);
                String price = tblHistory.getValueAt(i, 4).toString();
                money += Double.parseDouble(changePrice(price));
            }
            lbWantPay.setText(formatter.format(money) + " đồng");
            checkAll = false;
        } else {
            btnPayTotal.setText("Chọn tất cả");
            for (int i = 0; i < tblHistory.getRowCount(); i++) {
                tblHistory.setValueAt(false, i, 9);
            }
            checkAll = true;
            lbWantPay.setText(formatter.format(0) + " đồng");
        }
    }//GEN-LAST:event_btnPayTotalActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSearch.doClick();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void lbNotificationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbNotificationMouseClicked
        menuTab.setSelectedIndex(1);
        txtSearch.setText(txtLicensePlate.getText().trim());
        btnSearch.doClick();
    }//GEN-LAST:event_lbNotificationMouseClicked

    private void btnPaymentWantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentWantActionPerformed
        ManualPaymentRequest mpr = new ManualPaymentRequest();
        String localhost = txtLocalhost.getText().trim();
        for (int i = 0; i < tblHistory.getRowCount(); i++) {
            Boolean checked = Boolean.valueOf(tblHistory.getValueAt(i, 9).toString());
            String id = tblHistory.getValueAt(i, 1).toString();
            if (checked) {
                try {
                    mpr.finishManualPayment(id, localhost);
                } catch (Exception ex) {
                    Logger.getLogger(MainForm.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        lbWantPay.setText("0 đồng");
        btnSearch.doClick();
    }//GEN-LAST:event_btnPaymentWantActionPerformed

    private void TablePaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePaneMousePressed

    }//GEN-LAST:event_TablePaneMousePressed

    private void TablePaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePaneMouseReleased
        double money = 0.0;
        DecimalFormat formatter = new DecimalFormat("###,###,###.##");
        for (int i = 0; i < tblHistory.getRowCount(); i++) {
            Boolean checked = Boolean.valueOf(tblHistory.getValueAt(i, 9).toString());
            String price = tblHistory.getValueAt(i, 4).toString();
            //money += Double.parseDouble(changePrice(price));
            if (checked) {
               money += Double.parseDouble(changePrice(price));
            }
            lbWantPay.setText(formatter.format(money) + " đồng");
        }
    }//GEN-LAST:event_TablePaneMouseReleased

    /**
     * @param args the command line arguments
     */
    //    public static void main(String args[]) {
    //        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    //        /* Create and display the form */
    //        java.awt.EventQueue.invokeLater(new Runnable() {
    //
    //            public void run() {
    //                LoginDTO dto = new LoginDTO("hieu", 1L, "Chi Hieu");
    //                new MainForm(dto).setVisible(true);
    //
    //            }
    //        });
    //
    //    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InfoPane;
    private javax.swing.JPanel TablePane;
    private javax.swing.JButton btnCheckConnection;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnManualPayment;
    private javax.swing.JButton btnPayTotal;
    private javax.swing.JButton btnPaymentWant;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lbId;
    private javax.swing.JLabel lbNotification;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JLabel lbPirce;
    private javax.swing.JLabel lbTotal;
    private javax.swing.JLabel lbTypeName;
    private javax.swing.JLabel lbWantPay;
    private javax.swing.JTabbedPane menuTab;
    private javax.swing.JPanel paneBasic;
    private javax.swing.JPanel panePayment;
    private javax.swing.JPanel panelCamera;
    private javax.swing.JPanel tabHistory;
    private javax.swing.JPanel tabHome;
    private javax.swing.JPanel tabSetting;
    private javax.swing.JLabel txtHello;
    private javax.swing.JFormattedTextField txtLane;
    private javax.swing.JTextField txtLicensePlate;
    private javax.swing.JTextField txtLocalhost;
    private javax.swing.JButton txtLogOut;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JFormattedTextField txtStation;
    private javax.swing.JTextField txtStationName;
    // End of variables declaration//GEN-END:variables

}
